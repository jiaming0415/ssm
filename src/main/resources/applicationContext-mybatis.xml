<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--1.开启注解并指定扫描位置-->
        <!-- 注解驱动 -->
        <context:annotation-config/>
        <!-- 用注解方式注入bean，并指定查找范围：com.zking.ssh2及子子孙孙包-->
        <context:component-scan base-package="com.zking.ssm" use-default-filters="true">
            <!--不扫描已经加了Controller的包-->
            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>

    <!--2.导入外部jdbc连接配置-->
       <!-- <context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!--3.配置dbcp2数据库连接池-->
        <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
              destroy-method="close">
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
            <!--初始连接数-->
            <property name="initialSize" value="${jdbc.initialSize}"/>
            <!--最大活动连接数-->
            <property name="maxTotal" value="${jdbc.maxTotal}"/>
            <!--最大空闲连接数-->
            <property name="maxIdle" value="${jdbc.maxIdle}"/>
            <!--最小空闲连接数-->
            <property name="minIdle" value="${jdbc.minIdle}"/>
            <!--设置为-1时，如果没有可用连接，连接池会一直无限期等待，直到获取到连接为止。-->
            <!--如果设置为N（毫秒），则连接池会等待N毫秒，等待不到，则抛出异常-->
            <property name="maxWaitMillis" value="${jdbc.maxWaitMillis}"/>
        </bean>

    <!--4.配置spring与mybatis集成配置-->
        <!--1) 创建sqlSessionFactory-->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <!-- 指定数据源 -->
            <property name="dataSource" ref="dataSource"/>
            <!-- 自动扫描XxxMapping.xml文件，**任意路径 -->
            <property name="mapperLocations" value="classpath*:com/zking/ssm/**/mapper/*.xml"/>
            <!-- 指定别名 -->
            <property name="typeAliasesPackage" value="com/zking/ssm/**/model"/>
            <!--设置mybaits对缓存的支持-->
            <property name="configurationProperties">
                <props>
                    <!-- 全局映射器启用缓存 *主要将此属性设置完成即可-->
                    <prop key="cacheEnabled">true</prop>
                    <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                    <prop key="lazyLoadingEnabled">false</prop>
                    <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 -->
                    <prop key="aggressiveLazyLoading">true</prop>
                    <!--开启驼峰命名-->
                    <prop key="mapUnderscoreToCamelCase">true</prop>
                </props>
            </property>
            <property name="configuration">
                <bean class="org.apache.ibatis.session.Configuration">
                    <property name="mapUnderscoreToCamelCase" value="true"/>
                </bean>
            </property>

            <!--配置pagehelper插件-->
            <property name="plugins">
                <array>
                    <bean class="com.github.pagehelper.PageInterceptor">
                        <property name="properties">
                            <value>
                                helperDialect=mysql
                            </value>
                        </property>
                    </bean>
                </array>
            </property>
        </bean>

        <!--2) 自动扫描com/zking/oa/**/mapper下的所有XxxMapper接口(其实就是DAO接口)，并实现这些接口，-->
        <!--   即可直接在程序中使用dao接口，不用再获取sqlsession对象-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <!--basePackage 属性是映射器接口文件的包路径。-->
            <!--你可以使用分号或逗号 作为分隔符设置多于一个的包路径-->
            <property name="basePackage" value="com/zking/ssm/**/mapper"/>
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        </bean>

    <!--5.配置注解式事务（推荐使用声明式事务）-->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource" />
        </bean>
        <tx:annotation-driven transaction-manager="transactionManager" />


   <!-- &lt;!&ndash; 事务管理器。&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    &lt;!&ndash; 事务增强处理。告诉事务管理器，什么样的方法，采用什么样的事务策略。&ndash;&gt;
    &lt;!&ndash; 相当于 对方法的第二次过滤 &ndash;&gt;
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*"  propagation="SUPPORTS" />
            <tx:method name="add*" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    &lt;!&ndash; AOP配置事务:不用修改源代码，就可以增加事务功能。&ndash;&gt;
    <aop:config>
        &lt;!&ndash;切入点。切入点表达式expression相当于 对方法的第一次过滤，哪些方法需要事务增强处理。 &ndash;&gt;
        <aop:pointcut expression="execution(public * service..*(..))" id="serviceMethod" />
        &lt;!&ndash; 织入。在切入点 添加事务增强处理。&ndash;&gt;
        <aop:advisor advice-ref="txAdvice"
                     pointcut-ref="serviceMethod" />
    </aop:config>-->



    <!-- 4.spring声明式事物 -->
    <!--声明式事务配置开始 -->
    <!--1) 开启自动代理 -->
  <!--  <aop:aspectj-autoproxy />

    &lt;!&ndash;2) 事务管理器 &ndash;&gt;
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    &lt;!&ndash;3) 定义事务特性 &ndash;&gt;
    <tx:advice id="txAdvice"
               transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />

            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />

            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />

            <tx:method name="load*" propagation="REQUIRED"
                       read-only="true" />
            <tx:method name="list*" propagation="REQUIRED"
                       read-only="true" />
            <tx:method name="select*" propagation="REQUIRED"
                       read-only="true" />
            <tx:method name="query*" propagation="REQUIRED"
                       read-only="true" />
            <tx:method name="get*" propagation="REQUIRED"
                       read-only="true" />
            <tx:method name="do*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash;4) 定义切入点 &ndash;&gt;
    <aop:config>
        &lt;!&ndash; pointcut属性用来定义一个切入点，分成四个部分理解 [* ][*..][*Biz][.*(..)] &ndash;&gt;
        &lt;!&ndash; A： 返回类型，*表示返回类型不限 &ndash;&gt;
        &lt;!&ndash; B： 包名，*..表示包名不限 &ndash;&gt;
        &lt;!&ndash; C： 类或接口名，*Biz表示类或接口必须以Biz结尾 &ndash;&gt;
        &lt;!&ndash; D： 方法名和参数，*(..)表示方法名不限，参数类型和个数不限 &ndash;&gt;
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* *..*Biz.*(..))" />
    </aop:config>-->
    <!-- 声明式事务配置结束 -->


    <!--6.开启动态代理-->
        <aop:aspectj-autoproxy/>
</beans>